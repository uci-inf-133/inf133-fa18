extends ../layout

block content
	main.container-fluid
		h1 A2: Runkeeper Tweet Report in JavaScript and TypeScript
		h3='Due ' + assignment.due
		p In this assignment, you'll use JavaScript and TypeScript to create a webpage report which helps a potential researcher understand a week’s worth of Tweets from RunKeeper, a popular running app. You’ll follow much of the methodology from one of Professor Epstein’s research papers, which looked to understand whether the content of RunKeeper tweets influences how or whether audience members respond.
		cite Daniel A. Epstein, Bradley H. Jacobson, Elizabeth Bales, David W. McDonald, Sean A. Munson.
			em 
				a(href="http://www.depstein.net/pubs/depstein_cscw15.pdf") From "Nobody Cares" to "Way to Go!": A Design Framework for Social Sharing in Personal Informatics
			| . CSCW 2015.

		h2 Starter code
		p A starter repository is on 
			a(href="https://classroom.github.com/a/jN--LFOd") GitHub Classroom
			| .
		h3 Repository structure
		p The repository contains 
			strong 14
			|  files (excluding the 
			code .gitignore
			| , which specifies what files should not be committed). You will edit half of them in this assignment.
		p The files you 
			em should not
			|  need to edit are:
			ul
				li
					code tsconfig.json
					| : a project configuration file which sets compiler options for TypeScript.
				li
					code css/style.css
					| : a CSS stylesheet for the assignment. Most of the layout is imported from Bootstrap.
				li
					code index.html
					| : the root HTML file, which 
					code js/about.js
					|  will edit the DOM of to display information about the Tweets in the dataset.
				li
					code activities.html
					| : another HTML file, which 
					code js/activities.js
					|  will edit the DOM of to display information about the activity types people posted to Twitter.
				li
					code description.html
					| : another HTML file, which 
					code js/description.js
					|  will edit the DOM of to display an interface for searching through the Tweets.
				li
					code data/saved_tweets.json
					| : a JSON object containing the same week’s worth of saved tweets. Your code won't use this file, but the format may be useful as you’re looking through the Tweets.
				li
					code js/get_saved_tweets.js
					| : a JavaScript file containing an asynchronous function which returns a week’s worth of saved tweets. This file will be used in place of parsing the 
					code data/saved_tweets.json
					|  file.
		p Note that this means 
			strong you should not need to edit any HTML or CSS files.
			|  You may choose to, but you should only need to if you’re adding functionality beyond the assignment requirements.
		p The files you 
			em should
			|  edit are:
			ul
				li
					code js/about.js
					| : a JavaScript file which edits the DOM of 
					code index.html
					|  to display information about the Tweets in the dataset.
				li
					code js/activities.js
					| : a JavaScript file which edits the DOM of 
					code activities.html
					|  to display information about the activity types people posted to Twitter.
				li
					code js/description.js
					| : a JavaScript file which edits the DOM of 
					code description.html
					|  to display an interface for searching through the Tweets.
				li
					code js/get_live_tweets.js
					| : a JavaScript file containing an asynchronous function which loads recent Tweets using the Twitter API. Initially, the function returns undefined.
				li
					code js/live_button_handler.js
					| : a JavaScript file which should set the Click event handler for the button for loading live tweets. Initially, no Click event handler is specified.
				li
					code ts/tweet.ts
					| : a TypeScript file which creates a Tweet class used to parse different parts of the text of each Tweet.
				li
					code readme.txt
					| : a readme file where you describe what you made for the assignment.
		p Following the instructions listed in the 
			a(href="#twitter_proxy") Running the Twitter Proxy section
			| , you should create a 
			code twitter_proxy_config.json
			|  file. Because this file contains secret information (your login information for Twitter), it should not be committed to the repository and is therefore listed in the 
			code .gitignore
			|  file.
		p One additional file, 
			code js/tweet.js
			| , will be created by transpiled ts/tweet.ts into JavaScript. Because this file can be generated, it does not be committed to the repository and is therefore listed in the 
			code .gitignore
			|  file.
		p This assignment can be completed without writing any additional files or functions. But you may add a file or function if you want (such as to complete one of the bonus features).
		h3 Setting up your Workspace
		p You will need to install a TypeScript transpiler and a Twitter Proxy for this assignment. The TypeScript transpiler converts TypeScript files to equivalent JavaScript. Like many APIs, Twitter doesn’t support making API requests on a client browser, so the Twitter Proxy creates a server running on your local computer at port 7890. The next assignment will explore how to make a server, but it’s not the focus of this assignment. It's also recommended that you install a live reloader to simplify debugging.
		p The easiest way to install these two packages is through npm, the Package Manager in Node.js. Follow these instructions to install npm: 
			a(href="https://www.npmjs.com/get-npm") https://www.npmjs.com/get-npm
		p Once npm is installed, open your favorite terminal and install the three packages for the assignment. Both are applications which run in the terminal rather than libraries, so it’s recommended that you install them with the -g (global) option.
		ul
			li Twitter Proxy: 
				a(href="https://www.npmjs.com/package/twitter-proxy") https://www.npmjs.com/package/twitter-proxy
				| . Intall with 
				code npm install -g twitter-proxy
			li TypeScript Transpiler: 
				a(href="https://www.npmjs.com/package/typescript") https://www.npmjs.com/package/typescript
				| . Intall with 
				code npm install -g typescript
			li Live Server: 
				a(href="https://www.npmjs.com/package/live-server") https://www.npmjs.com/package/live-server
				| . Install with 
				code npm install -g live-server
		h4 Running the TypeScript Transpiler
		p The typescript transpiler, 
			code tsc
			| , takes a project configuration file as an optional argument. The configuration file is in the root folder of the repository, so run tsc from there: 
			code tsc --p tsconfig.json
			| . It’s also recommended that you add the 
			code --watch
			|  flag so your code automatically re-compiles. This code will create the JavaScript version of the Tweet class in
			code js/tweet.js
			| .
		h4 Running the Twitter Proxy
		p The Twitter developer account and Proxy is only required for the 
			strong last
			|  of the four parts of the assignment 
			a(href="#live_tweets") (Loading Live Tweets)
			| . It's good to create a development account and app sooner, in case they take some time to get approved. But setting it up and making API requests is not required to complete the first 75% of the assignment.
		p First create a development account on Twitter.
			a(href="https://developer.twitter.com/en/apply/user") https://developer.twitter.com/en/apply/user
			| . Once your development account is approved, you can make a development application. 
			a(href="https://developer.twitter.com/en/apps") https://developer.twitter.com/en/apps
			| . We’re only going to use the API to read tweets, so some of the required parameters aren’t applicable. Name the app whatever you’d like. For the 
			em Application Description
			|  and 
			em explanation of how the app will be used
			| , enter:
			blockquote This App is used to read tweets from a running app as part of a course assignment for IN4MATX 133, User Interface Software, at the University of California, Irvine. It will only be used to analyze Tweets, no Tweeting/Retweeting/Liking will be incorporated. The app will analyze tweets by parsing the text of each tweet for user-generated content and sentiment, like weather information or descriptions of how difficult the run was. The Tweet content will be displayed at an individual level (rather than aggregated), but it will not be displayed with Twitter user accounts and will not be visible anywhere on the web. The app will only be used internally for the course.
		p Put the course website as the Website URL 
			a(href="http://inf133-fa18.depstein.net/") http://inf133-fa18.depstein.net/
			| . Do not enable sign-in or provide a Callback, Term of Service, or Privacy Policy URL.
		p Email the course staff if your application does not get approved or you run into other options creating a development application. We have an approved Twitter for Education account as a backup.
		p Once you have created the development app, find the Consumer API keys for the app under 
			em "Keys and Tokens"
			| . Create a file, 
			code twitter_proxy_config.json
			| , with your consumer key and secret. It should be of the form:
			pre
				| {
				|  "consumerKey": "[Your Consumer Key]",
				|  "consumerSecret": "[Your Consumer Secret]"
				| } 
		p Once this file is created, you can run your twitter proxy in the terminal from the same directory as your config file: 
			code twitter-proxy twitter_proxy_config.json
			| . This will enable you to access the Twitter API by swapping 
			code https://api.twitter.com/
			|  in all API requests with the proxy, 
			code localhost:7890/
			| . Make sure to keep the 1.1 in the 
			code localhost
			|  url.
		h4 Running Live Server
		p You may find the live-server package helpful, which automatically refreshes your webpage when you make changes to it. It’s not perfect, but can be a helpful resource. Run it in your terminal from the root directory with 
			code live-server
			| .	
		h2 Requirements
		p There are four parts to this assignment: summarizing tweets on the about page, identifying the most popular activities to the activities page, adding a text search interface to the description page, and loading live tweets. You’ll need to add features to the Tweet TypeScript class throughout. You can also optionally add any of a number of bonus features.
		p The much of this assignment involves using 
			a(href="https://api.jquery.com/") JQuery
			|  to modify the content of different classes or ids with computed values (for example, calculating the number of tweets of each type of activity in the dataset). The classes and ids which need editing appear with three question marks (???). With a few exceptions, the values should be computed 
			em dynamically
			| . Meaning, your report would compute and display different results if next week’s tweets were loaded instead. The last part of the assignment will help test this by loading the most recent RunKeeper Tweets.
		p You will not receive credit for these modifications if you edit the HTML directly or hard-code a variable to the value that the span should be set to. There are a few spans where hard-coding in 
			code activities.js
			|  is expected/allowed.
		h3 Summarizing Tweets (about.js)
		p In this part, you will provide some summary information to a researcher interested in the Tweet data. You will identify the dates of the earliest and latest Tweets in the set, how many of each category exist, and how many of the completed tweets contain written text. Use JQuery methods to programmatically edit the spans for each question.
		p The time attribute of the Tweet class contains the date of each Tweet. Write out the Month, Day, and Year of the dates (e.g., Sunday, October 7, 2018). The JavaScript function 
			a(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString") toLocaleDateString()
			|  may be helpful for formatting the dates.
		p The tweets can be divided into four categories:
			ul
				li Completed events, where the person is Tweeting an activity they recently finished.
				li Live events, where the person is Tweeting that they are currently doing an activity.
				li Achievement, where the person is indicating an achievement they have reached or a goal they have set.
				li Miscellaneous, for all RunKeeper-related discussion which did not involve posting about an activity.
		p Some of the Tweets in each category also contain text written by the user.
		p Look through the text of the tweets in the dataset to devise rules for categorizing the tweets and identifying whether it contains user-written text programmatically. Write those rules into the 
			em source
			| , 
			em written
			| , and 
			em writtenText 
			| getter functions in 
			code tweet.ts
			| . The JavaScript string 
			a(href="https://www.w3schools.com/jsref/jsref_startswith.asp") startsWith
			| , 
			a(href="https://www.w3schools.com/jsref/jsref_endswith.asp") endsWith
			| , and 
			a(href="https://www.w3schools.com/jsref/jsref_includes.asp") includes
			|  functions may help with this.
		p You may arrive at slightly different percentages depending on the exact rules you create, and we will not evaluate whether your rules pull exactly the same numbers that ours did. That said, about 95% of RunKeeper Tweets in the Epstein et al. research paper dataset that were of completed events, and about 25% of those completed events included any written text. Your numbers will deviate from the percentages in the research paper, but probably not by much (+/- 5%).
		p Format all percentages with exactly two decimal places. The header of 
			code about.html
			|  loads the 
			a(href="http://mathjs.org/") Math.js library
			|  from a Content Delivery Network (CDN). You may find the 
			a(href="http://mathjs.org/docs/reference/functions/format.html") .format()
			|  function in mathjs useful for formatting percentages.
		h3 Identifying the Most Popular Activities (activities.js)
		p In this part, you help a researcher understand the activities people are logging in RunKeeper by identifying the types of activities and distances in the completed tweets and visualizing how distance varies by activity type and day of the week. Use JQuery methods to programmatically edit the spans for each question and 
			a(href="https://vega.github.io/vega-lite/") Vega-Lite
			|  to create graphs.
		p First, update the getters for 
			em activityType 
			|  and 
			em distance
			| in 
			code tweet.ts
			| . Note that these values only have to be identified for completed tweets, which follow a fairly rigid format. Syntax for 
			a(href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions") regular expressions
			|  is beyond the scope of this class, but may be helpful for calculating these values.  
			a(href="https://www.w3schools.com/jsref/jsref_indexof.asp") indexOf
			|  or 
			a(href="https://www.w3schools.com/jsref/jsref_search.asp") search
			|  should also be sufficient.
		p Because RunKeeper is used all around the world, some distances will be expressed in Miles and others in Kilometers. Convert them all to one unit. You might typically use a library to help with this (Math.js has some helper functions). However, our setup for TypeScript makes importing libraries challenging, so approximating is fine (e.g., 1 mi = 1.609 km). You’ll make more use of libraries in future assignments.
		p Again, the exact breakdown of activity types may vary slightly depending on the rules you create to parse. But there should be a major dropoff in Tweets between the three most common activity types, with thousands or many hundreds of Tweets each, and the other activity types.
		p Some of the activity types logged, such as Yoga, are better expressed with time durations rather than distances. Each of the three most frequently-logged activity types should be distance-based, so you do not need to parse the time duration activity types.
		p Once 
			em activityType
			|  and 
			em distance
			|  are calculated, they should be plotted with Vega-Lite. You will make three plots in total:
			ul
				li A plot of how many of each type of activity exists in the dataset. The specification of a potential visualization appears in 
					code activities.js
					| .
				li A plot of the distances by day of the week for all of the three most tweeted-about activities. Day of the week should be 
					a(href="https://vega.github.io/vega-lite/docs/encoding.html") encoded
					|  on the x-axis, distance on the y-axis, and activity type by color. There are a lot of points on this plot, so it’s hard to interpret which activity tended to be longest and on what day of the week.
				li A plot of the distances by day of the week for all of the three most tweeted-about activities, 
					a(href="https://vega.github.io/vega-lite/docs/aggregate.html") aggregating
					|  the activities by the mean.
			The Vega-Lite 
			a(href="https://vega.github.io/vega-lite/examples/") examples
			|  or the 
			a(href="https://vega.github.io/editor/#/examples/vega-lite/bar") online editor
			|  may be helpful as you build the visualizations.
		p The two plots should alternate appearing when the button with the "aggregate" id is pressed. As shown in this video (the activityType legend is intentionally cut off):
		video(width="200" autoplay muted loop)
			source(src="../files/assignments/a2_vis_video.mp4" type="video/mp4")
			Toggling between the two visualizations.
		p Use the information shown in your graph to answer the questions about what activity people tended to do the longest and when. 
			strong The answers to these questions can be hard-coded
			| , since calculating them programmatically would require a couple of annoying maps and filters.
		h3 Adding a Text Search Interface (description.js)
		p In this part, you will implement a “search” interface for running tweets which allows a researcher to look through the tweets and their corresponding RunKeeper activities.
		p Update the table with the tweet number, activity type, and tweet content when the researcher types in the search box. The 
			em searchCount
			|  and 
			em searchText
			|  spans should also update as a researcher types in the search box. Your code should check the search box and update the table after every character is entered into the box. Your code should also clear the table when the search text is deleted.
		p The links in the Tweet should also be clickable to allow the researcher to explore the data more. To parse these, use similar strategies to how you parsed the type of activity and identified the tweet category. The 
			em getHTMLTableRow()
			| function in the tweet TypeScript class is a good place to parse the tweets and generate clickable links.
		video(width="600" autoplay muted loop)
			source(src="../files/assignments/a2_search.mp4" type="video/mp4")
			Toggling between the two visualizations.
		h3(id="live_tweets") Loading Live Tweets (get_live_tweets.js and live_button_handler.js)
		p In this part, you will use JavaScript’s 
			a(href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch") fetch API
			|  to scrape the latest Tweets with the RunKeeper hashtag. You may use other APIs instead, so long as the function returns a Promise.
		p You should use Twitter's 
			a(href="https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets") search API
			|  to get your tweets. Your code should get the maximum number of tweets for a single query (e.g., 100). Your code should get the most recent tweets rather than the most popular ones. You will need to 
			a(href="https://www.w3schools.com/tags/ref_urlencode.asp") encode
			|  the hashtag character (#). You might also consider specifying the Tweets to only be English (en). Implementing this feature will allow a researcher to browse the prior three parts with the 100 most recent #RunKeeper Tweets.
		p Note that the query will gather only the most recent 100 Tweets, which is substantially fewer than a week’s worth of Tweets. That is sufficient for demonstrating the proof-of-concept. Following Twitter’s pagination methods is a bonus feature for the assignment.
		h3 Optional/Bonus Features
		p The four parts of the assignment create a basic report tool. There are many ways of extending this tool, and we can offer a small amount of extra credit for implementing an extension or two. We’ve enumerated some potential extensions:
			ul
				li Following Twitter’s 
					a(href="https://developer.twitter.com/en/docs/ads/general/guides/pagination.html") pagination scheme
					|  to load the maximum number of recent tweets (one week, unless you pay for one of the premium APIs). Use the URL specified in 
					em next_results
					| .
				li Rather than alternating between two visualizations, using Vega-lite’s 
					a(href="https://vega.github.io/vega-lite/tutorials/streaming.html") streaming data
					|  or 
					a(href="https://vega.github.io/vega-lite/docs/selection.html") interactive charts
					|  to dynamically change one chart when the aggregate button is pressed.
				li Mining sentiment from the text of each Tweet and presenting it in the table. One way of identifying sentiment is to use a list of positive and negative adjectives, such as the ones devised in 
					a(href="https://www.cs.uic.edu/~liub/FBS/sentiment-analysis.html#datasets") these research projects
					| .
				li Understanding and plotting when people do their longest time-based activities like Yoga.
				li Programmatically calculating the longest and shortest class of activity and whether it tends to occur on weekdays or weekends. This calculation can be influenced by outliers, so remove any Tweets with distances greater than three standard deviations away from the mean for that activity.
		p We are open to other suggestions for bonus features.
		h3 Submitting
		p Your code repository on GitHub Classroom is your submission. The service will take the latest snapshot of your repository as your submission. Any commits made after the deadline are considered late and are subject to the course's 
			a(href="/syllabus#duedates") late policy
			| .
		p Please update your readme.txt with how long the assignment took, who or what online resources you consulted with, any bonus features you added, and anything else we should know.
		h3 Grading
		p This assignment will be graded on a scale of 10 points, broken down as follows:
		ul
			li Summarizing tweets (2 points)
			li Identifying the most popular activities (3 points)
			li Adding a text search interface (3 points)
			li Loading live tweets (2 points)
		p Each bonus feature completed will earn you 1 point of extra credit. However, you can only earn a maximum of 2 points this way (e.g., no points given for beyond two bonus features). The maximum grade for this assignment is therefore 12/10.
		p In prior courses, you've been asked to follow good principles for indentation, naming variables, commenting, etc. We expect you to do the same in this course, but aim to avoid being draconian in our enforcement of these principles. Egregiously poor formatting, completely uncommented code, etc. may incur a small penalty (e.g., -1 point), but we expect this to be rarely applied.
		p As stated previously, we will not grade on whether the spans with values created in the report contain the exact same values as our calculations. We are just looking for them to be in the correct “ballpark” and will spend more energy evaluating the interactive portions of the report.